/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘LoadTesting1.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using Microsoft.Win32;
    using System;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Shared.Utilities;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Ext.LoadRunnerRTAddin;
    using HP.ST.Fwk.JVMLoader;
    
    
    
    public partial class LRWorkFlowScript : LRWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
        TestEntities _flow = null;
    	LoadRunner.LrApi lr;
    
    	
    	public BindDirection bind_dir26 = null;
        public BindDirection bind_dir27 = null;
        public HP.ST.Ext.LoadRunnerRTAddin.LoadRunnerDataCursor LoadRunnerDataCursor11 = null;
        public BindDirection bind_dir28 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy LoadRunnerDataCursor11_Policy = null;
        public BindDirection bind_dir29 = null;
        public BindDirection bind_dir30 = null;
        public BindDirection bind_dir31 = null;
        public BindDirection bind_dir32 = null;
        
        public LRWorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test", VuserClass.executionUnitInput)
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	this._context.SnapshotManager.EnableSnapshots = false;
        	this._context.PropertyBag["IsRunningInLodeMode"] = true;
        	_userCode = new TestUserCode();
            _flow = _userCode;
        	LoadInput();
        	this.Activities.Clear();
        	_flow.DataFetchActivity7 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity7");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity9 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity9");
            _flow.DataExporterCloseActivity10 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity10");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity8 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity8");
            this.LoadRunnerDataCursor11 = new HP.ST.Ext.LoadRunnerRTAddin.LoadRunnerDataCursor(_context,"LoadRunnerDataCursor11");
            this.LoadRunnerDataCursor11_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence6");
            _flow.StServiceCallActivity4 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity4");
            _flow.StServiceCallActivity5 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity5");
            _flow.DataFetchActivity7.Comment = @"";
            _flow.DataFetchActivity7.IconPath = @"";
            _flow.DataFetchActivity7.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.DataFetchActivity7.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity7.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity7_QueryParameters_Document = new XmlDocument();
            DataFetchActivity7_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity7Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>d254ae66-c938-460b-a494-5180a0bc8aa2</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>citypairs!Input</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>citypairs</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{citypairs!Input.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Input$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity7_QueryParameters_Document.LoadXml(xmlDataFetchActivity7Params);
            _flow.DataFetchActivity7.QueryParameters = DataFetchActivity7_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("citypairs!Input", _flow.DataFetchActivity7);
            this.Activities.Add (_flow.DataFetchActivity7);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 3 iterations";
            _flow.Loop2.NumberOfIterations = (int)3;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.Loop2.Activities.Add (this.LoadRunnerDataCursor11);
            _flow.Loop2.Activities.Add (_flow.Sequence6);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity9.Comment = @"";
            _flow.DataExporterActivity9.IconPath = @"";
            _flow.DataExporterActivity9.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi51 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter26 = new VTDObjectGetter(pi51);
            VTDPropertyInfoBase pi52 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter26 = new VTDObjectSetter(pi52);
            binding_setter26 = new StringFormaterDecorator(binding_setter26,"{Step.DataFetchActivity7.OutTable}");
            bind_dir26 = new BindDirection(_flow.DataFetchActivity7,binding_getter26,binding_setter26,BindTargetType.ToInProperty);
            _flow.DataExporterActivity9.InDirections.Add(bind_dir26);
            this.Activities.Add (_flow.DataExporterActivity9);
            _flow.DataExporterCloseActivity10.Comment = @"";
            _flow.DataExporterCloseActivity10.IconPath = @"";
            _flow.DataExporterCloseActivity10.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.DataExporterCloseActivity10);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            _flow.EndActivity3.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity8.Comment = @"";
            _flow.DataDisconnectActivity8.IconPath = @"";
            _flow.DataDisconnectActivity8.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi53 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter27 = new VTDObjectGetter(pi53);
            VTDPropertyInfoBase pi54 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter27 = new VTDObjectSetter(pi54);
            binding_setter27 = new StringFormaterDecorator(binding_setter27,"{Step.DataFetchActivity7.OutTable}");
            bind_dir27 = new BindDirection(_flow.DataFetchActivity7,binding_getter27,binding_setter27,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity8.InDirections.Add(bind_dir27);
            this.Activities.Add (_flow.DataDisconnectActivity8);
            this.LoadRunnerDataCursor11.Comment = @"";
            this.LoadRunnerDataCursor11.IconPath = @"";
            this.LoadRunnerDataCursor11.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi55 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter28 = new VTDObjectGetter(pi55);
            VTDPropertyInfoBase pi56 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter28 = new VTDObjectSetter(pi56);
            binding_setter28 = new StringFormaterDecorator(binding_setter28,"{Step.DataFetchActivity7.OutTable}");
            bind_dir28 = new BindDirection(_flow.DataFetchActivity7,binding_getter28,binding_setter28,BindTargetType.ToInProperty);
            this.LoadRunnerDataCursor11.InDirections.Add(bind_dir28);
            this.LoadRunnerDataCursor11_Policy.StartPosition = CursorStartPosition.UserSpecificRecord;
            this.LoadRunnerDataCursor11_Policy.StartAtSpecificRow = 2;
            this.LoadRunnerDataCursor11_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.LoadRunnerDataCursor11_Policy.EndAtSpecificRow = 8;
            this.LoadRunnerDataCursor11_Policy.StepType = CursorStepType.Forward;
            this.LoadRunnerDataCursor11_Policy.StepSize = 1;
            this.LoadRunnerDataCursor11_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Stay;
            this.LoadRunnerDataCursor11.Policy = this.LoadRunnerDataCursor11_Policy;
            this.LoadRunnerDataCursor11.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.LoadRunnerDataCursor11.ResetCursor;
            _flow.Sequence6.Comment = @"";
            _flow.Sequence6.IconPath = @"";
            _flow.Sequence6.Name = @"Sequence6";
            _flow.Sequence6.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.Sequence6.Activities.Add (_flow.StServiceCallActivity4);
            _flow.Sequence6.Activities.Add (_flow.StServiceCallActivity5);
            XmlDocument StServiceCallActivity4_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity4_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity4_InputEnvelope_Document.LoadXml(
@"<?xml version=""1.0"" encoding=""utf-8""?>
<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"">
  <Body>
    <GetFlights xmlns=""HP.SOAQ.SampleApp"">
      <DepartureCity>{DataSource.citypairs!Input.DepartureCity}</DepartureCity>
      <ArrivalCity>{DataSource.citypairs!Input.ArrivalCity}</ArrivalCity>
      <FlightDate>2020-09-02T00:00:00-06:00</FlightDate>
    </GetFlights>
  </Body>
</Envelope>");
            _flow.StServiceCallActivity4.InputEnvelope = StServiceCallActivity4_InputEnvelope_Document;
            _flow.StServiceCallActivity4.Comment = @"";
            _flow.StServiceCallActivity4.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity4.Name = @"GetFlights";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity4.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity4.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity4.Operation = @"GetFlights";
            _flow.StServiceCallActivity4.IsOneWay = false;
            _flow.StServiceCallActivity4.SendRequestToService=true;
            _flow.StServiceCallActivity4.FaultExpected=false;
            _flow.StServiceCallActivity4.IsAsync=false;
            _flow.StServiceCallActivity4.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity4.ListenOnPort = (int)0;
            _flow.StServiceCallActivity4.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity4.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity4.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi57 = new VTDPropertyInfoBase("DepartureCity");
            VTDBaseGetter binding_getter29 = new VTDObjectGetter(pi57);
            VTDPropertyInfoBase pi58 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='DepartureCity'][1]");
            VTDBaseSetter binding_setter29 = new VTDXPathSetter(pi58,XmlTypeCode.String);
            binding_setter29 = new StringFormaterDecorator(binding_setter29,"{DataSource.citypairs!Input.DepartureCity}");
            bind_dir29 = new BindDirection(this.LoadRunnerDataCursor11,binding_getter29,binding_setter29,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir29);
            VTDPropertyInfoBase pi59 = new VTDPropertyInfoBase("ArrivalCity");
            VTDBaseGetter binding_getter30 = new VTDObjectGetter(pi59);
            VTDPropertyInfoBase pi60 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='ArrivalCity'][1]");
            VTDBaseSetter binding_setter30 = new VTDXPathSetter(pi60,XmlTypeCode.String);
            binding_setter30 = new StringFormaterDecorator(binding_setter30,"{DataSource.citypairs!Input.ArrivalCity}");
            bind_dir30 = new BindDirection(this.LoadRunnerDataCursor11,binding_getter30,binding_setter30,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir30);
            XmlDocument StServiceCallActivity5_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity5_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity5_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>Business</Class><CustomerName>Tim Leach</CustomerName><DepartureDate>{Step.InputProperties.StServiceCallActivity4.Body.GetFlights.FlightDate}</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity4.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>2</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity5.InputEnvelope = StServiceCallActivity5_InputEnvelope_Document;
            _flow.StServiceCallActivity5.Comment = @"";
            _flow.StServiceCallActivity5.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity5.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity5.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity5.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity5.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity5.IsOneWay = false;
            _flow.StServiceCallActivity5.SendRequestToService=true;
            _flow.StServiceCallActivity5.FaultExpected=false;
            _flow.StServiceCallActivity5.IsAsync=false;
            _flow.StServiceCallActivity5.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity5.ListenOnPort = (int)0;
            _flow.StServiceCallActivity5.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity5.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity5.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi61 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][{Array0}]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter31 = new VTDXPathGetter(pi61,XmlTypeCode.Int);
            binding_getter31 = new XPathGetterDecorator(binding_getter31,"{Array0}",1);
            VTDPropertyInfoBase pi62 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter31 = new VTDXPathSetter(pi62,XmlTypeCode.Int);
            bind_dir31 = new BindDirection(_flow.StServiceCallActivity4,binding_getter31,binding_setter31,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir31);
            VTDPropertyInfoBase pi63 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseGetter binding_getter32 = new VTDXPathGetter(pi63,XmlTypeCode.DateTime);
            VTDPropertyInfoBase pi64 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter32 = new VTDXPathSetter(pi64,XmlTypeCode.DateTime);
            bind_dir32 = new BindDirection(_flow.StServiceCallActivity4,binding_getter32,binding_setter32,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir32);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	public LoadRunner.LrApi LrApi
    	{
    		set { this.lr = value; }
    	}
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
            this.ExecuteStep();
            WorkFlowScript_Completed();
        }
        
    
        void Workflow_Executing()
        {	        
        }
        
        void WorkFlowScript_Completed()
        {
          	OnExecutionCompleted();
        }
                    
        void TransactionStart(object sender, EventArgs args)
        {
          	STActivityBase activity = sender as STActivityBase;
          	lr.start_transaction(activity.Name);
        }
            
        void TransactionEnd(object sender, EventArgs args)
        {
           	STActivityBase activity = sender as STActivityBase;
           	lr.end_transaction(activity.Name, lr.PASS);
        }
    
        private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
           	
        }
    
    }
    
    public partial class VuserClass
    {
    	STRunTimeContext ctx;
        LRWorkFlowScript script;
    
        public int Action()
        {
    		
    		try
    		{
    			
                script.LrApi = lr;
                script.InitializeComponent();
                script.Start();
            }
            catch (Exception)
            {
    			// todo: log the error message
            }
            
            return 0;
        }
        
        private void SendLogToVugen(string logText)
    	{
    		lr.log_message(logText);
    	}
    }
    
    }
    